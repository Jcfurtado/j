/*
***SRC
**controller

package br.com.fiap.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

	@GetMapping("/")
	public String index(){
		return "home/index";
	}
	
}



**

package br.com.fiap.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import br.com.fiap.dao.VeiculoDAO;
import br.com.fiap.exception.IdNotFoundException;
import br.com.fiap.model.Veiculo;

@Controller
@RequestMapping("/veiculo")
public class VeiculoController {
	
	@Autowired //Servidor vai injetar um objeto aqui
	private VeiculoDAO dao;
	
	@Transactional
	@PostMapping("excluir")
	public ModelAndView excluirForm(int codigo, RedirectAttributes redirect){
		try {
			dao.remover(codigo);
			redirect.addFlashAttribute("msg", "Excluido!");
		} catch (IdNotFoundException e) {
			e.printStackTrace();
		}
		return new ModelAndView("redirect:/veiculo/listar");
	}
	
	@Transactional
	@PostMapping("editar")
	public ModelAndView processarFormEdicao(@Valid Veiculo veiculo,
				BindingResult result, RedirectAttributes redirect){
		ModelAndView retorno;
		if (result.hasErrors()){
			retorno = new ModelAndView("veiculo/edicao");
		}else{
			dao.alterar(veiculo);
			redirect.addFlashAttribute("msg", "Atualizado!");
			retorno = new ModelAndView("redirect:/veiculo/listar");
		}
		return retorno;
	}

	@GetMapping("editar/{id}")
	public ModelAndView abrirFormEdicao(@PathVariable("id") int codigo){
		Veiculo veiculo = dao.pesquisar(codigo);
		return new ModelAndView("veiculo/edicao")
							.addObject("veiculo",veiculo);
	}
	
	@GetMapping("cadastrar") //Abre a tela de formulário
	public ModelAndView abrirForm(){
		return new ModelAndView("veiculo/cadastro")
							.addObject("veiculo", new Veiculo());
	}
	
	@Transactional
	@PostMapping("cadastrar") //Processa as informações do formulário
	public ModelAndView processaForm(@Valid Veiculo veiculo, BindingResult result,  RedirectAttributes redirect){
		//Verifica se existe erro de validação
		ModelAndView retorno;
		if (result.hasErrors()){
			retorno = new ModelAndView("veiculo/cadastro");
		}else{		
			//Cadastrar no banco
			dao.cadastrar(veiculo);
			//Retorno.. redirecionar para o método listar
			retorno = new ModelAndView("redirect:/veiculo/listar");
			redirect.addFlashAttribute("msg", "Cadastrado com sucesso!");
		}
		return retorno;
	}
	
	@GetMapping("listar")
	public ModelAndView listarVeiculos(){
		ModelAndView retorno = new ModelAndView("veiculo/lista");
		retorno.addObject("veiculos",dao.listar());
		return retorno;
	}
	
}

***dao

package br.com.fiap.dao;

import java.util.List;

import br.com.fiap.exception.IdNotFoundException;

public interface GenericDAO<T,K> {

	void cadastrar(T entity);
	void alterar(T entity);
	void remover(K codigo) throws IdNotFoundException;
	T pesquisar(K codigo);
	List<T> listar();
	
}


**

package br.com.fiap.dao;

import br.com.fiap.model.Veiculo;

public interface VeiculoDAO extends GenericDAO<Veiculo, Integer>{

}


***daoimpl

package br.com.fiap.dao.impl;

import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import br.com.fiap.dao.GenericDAO;
import br.com.fiap.exception.IdNotFoundException;

public class GenericDAOImpl<T,K> implements GenericDAO<T, K>{

	@PersistenceContext
	protected EntityManager em;
	
	//.class da entidade (usado na busca)
	private Class<T> classe;
	
	//Construtor
	@SuppressWarnings("unchecked")
	public GenericDAOImpl() {		
		classe = (Class<T>) ((ParameterizedType)getClass()
			.getGenericSuperclass()).getActualTypeArguments()[0];
	}
	
	@Override
	public void cadastrar(T entity) {
		em.persist(entity);
	}

	@Override
	public void alterar(T entity) {
		em.merge(entity);
	}

	@Override
	public void remover(K codigo) throws IdNotFoundException {
		T entidade = pesquisar(codigo);
		if (entidade == null){
			throw new IdNotFoundException("Entidade não encontrada");
		}
		em.remove(entidade);
	}

	@Override
	public T pesquisar(K codigo) {
		return em.find(classe, codigo);
	}
	
	@Override
	public List<T> listar() {
		return em.createQuery("from " + classe.getName(),classe).getResultList();
	}

}


**


package br.com.fiap.dao.impl;

import org.springframework.stereotype.Repository;

import br.com.fiap.dao.VeiculoDAO;
import br.com.fiap.model.Veiculo;

@Repository
public class VeiculoDAOImpl 
		extends GenericDAOImpl<Veiculo, Integer> implements VeiculoDAO {

}
*/







